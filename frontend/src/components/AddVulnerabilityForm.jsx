// frontend/src/components/AddVulnerabilityForm.js
import React, { useState, useContext, useEffect } from 'react';
import { AppContext } from '../AppContext';

const AddVulnerabilityForm = ({ initialData, onDialogClose }) => {
  const { handleAddVulnerability, handleUpdateVulnerability, showMessage, user, reportType } = useContext(AppContext);
  const [formData, setFormData] = useState(initialData || {
    name: '',
    description: '',
    steps: [''],
    remediation: [''],
    risk: [''],
    payload: '',
    cvssScore: '',
    screenshots: [],
    url: '',
    device: '',
    ip: '',
    port: '',
  });
  const [isSuggestingRemediation, setIsSuggestingRemediation] = useState(false);
  const [remediationExplanation, setRemediationExplanation] = useState('');
  const [isExplainingRemediation, setIsExplainingRemediation] = useState(false);
  const [previewScreenshot, setPreviewScreenshot] = useState('');

  const API_BASE_URL = 'http://localhost:3001/api';

  useEffect(() => {
    if (initialData) {
      setFormData(initialData);
    } else {
      setFormData({
        name: '',
        description: '',
        steps: [''],
        remediation: [''],
        risk: [''],
        payload: '',
        cvssScore: '',
        screenshots: [],
        url: '',
        device: '',
        ip: '',
        port: '',
      });
    }
  }, [initialData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleArrayChange = (e, index, field) => {
    const newArray = [...formData[field]];
    newArray[index] = e.target.value;
    setFormData(prev => ({ ...prev, [field]: newArray }));
  };

  const handleAddPoint = (field) => {
    setFormData(prev => ({ ...prev, [field]: [...prev[field], ''] }));
  };

  const handleRemovePoint = (index, field) => {
    const newArray = formData[field].filter((_, i) => i !== index);
    setFormData(prev => ({ ...prev, [field]: newArray }));
  };

  const handleScreenshotChange = (e, index, field) => {
    const newScreenshots = [...formData.screenshots];
    newScreenshots[index][field] = e.target.value;
    setFormData(prev => ({ ...prev, screenshots: newScreenshots }));
  };

  const handleAddScreenshot = () => {
    setFormData(prev => ({ ...prev, screenshots: [...prev.screenshots, { url: '', caption: '' }] }));
  };

  const handleRemoveScreenshot = (index) => {
    const newScreenshots = formData.screenshots.filter((_, i) => i !== index);
    setFormData(prev => ({ ...prev, screenshots: newScreenshots }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (formData.name && formData.description) {
      if (initialData) {
        const result = await handleUpdateVulnerability({ ...initialData, ...formData });
        if (result.success) {
          showMessage('Vulnerability updated successfully!');
        } else {
          showMessage('Failed to update vulnerability.');
        }
      } else {
        const result = await handleAddVulnerability(formData);
        if (result.success) {
          showMessage('Vulnerability added successfully!');
        } else {
          showMessage('Failed to add vulnerability.');
        }
      }
      onDialogClose();
    }
  };

  const handleRemediationSuggestion = async () => {
    if (!formData.name && !formData.description) {
      showMessage('Please provide a vulnerability name and description first.');
      return;
    }
    setIsSuggestingRemediation(true);
    const prompt = `Given the vulnerability named "${formData.name}" with the description: "${formData.description}", please provide detailed remediation steps.`;
    
    try {
      const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
      const payload = { contents: chatHistory };
      const apiKey = "";
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
      let response = null;
      let retries = 0;
      const maxRetries = 5;
      const baseDelay = 1000;
  
      while (retries < maxRetries) {
        try {
          response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
          if (response.status !== 429) {
            break;
          }
          retries++;
          await new Promise(resolve => setTimeout(resolve, baseDelay * Math.pow(2, retries)));
        } catch (e) {
          retries++;
          await new Promise(resolve => setTimeout(resolve, baseDelay * Math.pow(2, retries)));
        }
      }
  
      if (!response || !response.ok) {
        showMessage('Could not get a suggestion. Please try again.');
        return;
      }
  
      const result = await response.json();
      const text = result?.candidates?.[0]?.content?.parts?.[0]?.text;
  
      if (text) {
        setFormData(prev => ({ ...prev, remediation: text.split('\n') }));
        showMessage('Remediation steps suggested by Gemini.');
      } else {
        showMessage('Could not get a suggestion. Please try again.');
      }
    } catch (e) {
      console.error("API Error:", e);
      showMessage('An error occurred while getting a suggestion.');
    } finally {
      setIsSuggestingRemediation(false);
    }
  };

  const handleRemediationExplanation = async () => {
    if (!formData.remediation || formData.remediation.every(p => p === '')) {
      showMessage('Please provide remediation steps first.');
      return;
    }
    setIsExplainingRemediation(true);
    const prompt = `Explain the following remediation steps in a professional and easy to understand manner: "${formData.remediation.join('\n')}"`;
  
    try {
      const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
      const payload = { contents: chatHistory };
      const apiKey = "";
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
      let response = null;
      let retries = 0;
      const maxRetries = 5;
      const baseDelay = 1000;
  
      while (retries < maxRetries) {
        try {
          response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
          if (response.status !== 429) {
            break;
          }
          retries++;
          await new Promise(resolve => setTimeout(resolve, baseDelay * Math.pow(2, retries)));
        } catch (e) {
          retries++;
          await new Promise(resolve => setTimeout(resolve, baseDelay * Math.pow(2, retries)));
        }
      }
  
      if (!response || !response.ok) {
        showMessage('Could not get an explanation. Please try again.');
        return;
      }
  
      const result = await response.json();
      const text = result?.candidates?.[0]?.content?.parts?.[0]?.text;

      if (text) {
        setRemediationExplanation(text);
      } else {
        showMessage('Could not get an explanation. Please try again.');
      }
    } catch (e) {
      console.error("API Error:", e);
      showMessage('An error occurred while getting an explanation.');
    } finally {
      setIsExplainingRemediation(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <h2 className="text-2xl font-bold text-gray-800">{initialData ? 'Edit Vulnerability' : 'Add New Vulnerability'}</h2>
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700">
          Vulnerability Name
        </label>
        <input
          type="text"
          id="name"
          name="name"
          value={formData.name || ''}
          onChange={handleChange}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          required
        />
      </div>
      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700">
          Description
        </label>
        <textarea
          id="description"
          name="description"
          rows="3"
          value={formData.description || ''}
          onChange={handleChange}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          required
        ></textarea>
      </div>
      <div>
        <label htmlFor="cvssScore" className="block text-sm font-medium text-gray-700">
          CVSS Score
        </label>
        <input
          type="number"
          id="cvssScore"
          name="cvssScore"
          value={formData.cvssScore || ''}
          onChange={handleChange}
          step="0.1"
          min="0.0"
          max="10.0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      {reportType === 'web' && (
        <>
          <div>
            <label htmlFor="url" className="block text-sm font-medium text-gray-700">
              Vulnerability Location (URL)
            </label>
            <input
              type="text"
              id="url"
              name="url"
              value={formData.url || ''}
              onChange={handleChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </>
      )}

      {reportType === 'network' && (
        <>
          <div>
            <label htmlFor="device" className="block text-sm font-medium text-gray-700">
              Device
            </label>
            <input
              type="text"
              id="device"
              name="device"
              value={formData.device || ''}
              onChange={handleChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label htmlFor="ip" className="block text-sm font-medium text-gray-700">
              IP Address
            </label>
            <input
              type="text"
              id="ip"
              name="ip"
              value={formData.ip || ''}
              onChange={handleChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label htmlFor="port" className="block text-sm font-medium text-gray-700">
              Port
            </label>
            <input
              type="text"
              id="port"
              name="port"
              value={formData.port || ''}
              onChange={handleChange}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </>
      )}

      <div>
        <div className="flex justify-between items-center mb-1">
          <label className="block text-sm font-medium text-gray-700">Risk</label>
          <button
            type="button"
            onClick={() => handleAddPoint('risk')}
            className="px-3 py-1 text-xs bg-gray-200 text-gray-800 rounded-md shadow-sm hover:bg-gray-300"
          >
            + Add point
          </button>
        </div>
        {formData.risk.map((point, index) => (
          <div key={index} className="flex space-x-2 mt-2">
            <input
              type="text"
              value={point || ''}
              onChange={(e) => handleArrayChange(e, index, 'risk')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
              placeholder={`Risk point ${index + 1}`}
            />
            {formData.risk.length > 1 && (
              <button type="button" onClick={() => handleRemovePoint(index, 'risk')} className="px-3 py-1 text-sm text-red-500">&times;</button>
            )}
          </div>
        ))}
      </div>

      <div>
        <div className="flex justify-between items-center mb-1">
          <label className="block text-sm font-medium text-gray-700">Steps to Reproduce</label>
          <button
            type="button"
            onClick={() => handleAddPoint('steps')}
            className="px-3 py-1 text-xs bg-gray-200 text-gray-800 rounded-md shadow-sm hover:bg-gray-300"
          >
            + Add step
          </button>
        </div>
        {formData.steps.map((step, index) => (
          <div key={index} className="flex space-x-2 mt-2">
            <textarea
              rows="2"
              value={step || ''}
              onChange={(e) => handleArrayChange(e, index, 'steps')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
              placeholder={`Step ${index + 1}`}
            ></textarea>
            {formData.steps.length > 1 && (
              <button type="button" onClick={() => handleRemovePoint(index, 'steps')} className="px-3 py-1 text-sm text-red-500">&times;</button>
            )}
          </div>
        ))}
      </div>
      
      <div>
        <label htmlFor="payload" className="block text-sm font-medium text-gray-700">
          Payload
        </label>
        <textarea
          id="payload"
          name="payload"
          rows="3"
          value={formData.payload || ''}
          onChange={handleChange}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        ></textarea>
      </div>

      <div className="space-y-2">
        <div className="flex justify-between items-center">
          <label className="block text-sm font-medium text-gray-700">
            Remediation
          </label>
          <div className="flex space-x-2">
            <button
              type="button"
              onClick={handleRemediationSuggestion}
              className="px-3 py-1 text-xs bg-purple-600 text-white rounded-md shadow-sm hover:bg-purple-700 transition-colors duration-200"
              disabled={isSuggestingRemediation}
            >
              {isSuggestingRemediation ? 'Suggesting...' : 'Suggest Remediation ✨'}
            </button>
            <button
              type="button"
              onClick={handleRemediationExplanation}
              className="px-3 py-1 text-xs bg-yellow-600 text-white rounded-md shadow-sm hover:bg-yellow-700 transition-colors duration-200"
              disabled={isExplainingRemediation || formData.remediation.every(p => p === '')}
            >
              {isExplainingRemediation ? 'Explaining...' : 'Explain Remediation ✨'}
            </button>
          </div>
        </div>
        {formData.remediation.map((remediation, index) => (
          <div key={index} className="flex space-x-2 mt-2">
            <textarea
              rows="2"
              value={remediation || ''}
              onChange={(e) => handleArrayChange(e, index, 'remediation')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
              placeholder={`Remediation point ${index + 1}`}
            ></textarea>
            {formData.remediation.length > 1 && (
              <button type="button" onClick={() => handleRemovePoint(index, 'remediation')} className="px-3 py-1 text-sm text-red-500">&times;</button>
            )}
          </div>
        ))}
        <button
          type="button"
          onClick={() => handleAddPoint('remediation')}
          className="mt-2 px-3 py-1 text-xs bg-gray-200 text-gray-800 rounded-md shadow-sm hover:bg-gray-300"
        >
          + Add another point
        </button>
      </div>

      <div>
        <div className="flex justify-between items-center mb-1">
          <label className="block text-sm font-medium text-gray-700">Screenshots</label>
          <button
            type="button"
            onClick={handleAddScreenshot}
            className="px-3 py-1 text-xs bg-gray-200 text-gray-800 rounded-md shadow-sm hover:bg-gray-300"
          >
            + Add screenshot
          </button>
        </div>
        {formData.screenshots.map((screenshot, index) => (
          <div key={index} className="flex flex-col space-y-2 mt-2">
            <input
              type="text"
              value={screenshot.url || ''}
              onChange={(e) => handleScreenshotChange(e, index, 'url')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
              placeholder={`Screenshot URL ${index + 1}`}
            />
            <input
              type="text"
              value={screenshot.caption || ''}
              onChange={(e) => handleScreenshotChange(e, index, 'caption')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
              placeholder={`Caption for Screenshot ${index + 1}`}
            />
            <div className="flex space-x-2">
              <button
                type="button"
                onClick={() => setPreviewScreenshot(screenshot.url)}
                className="flex-grow px-3 py-1 text-sm bg-blue-600 text-white rounded-md shadow-sm hover:bg-blue-700"
              >
                Preview
              </button>
              {formData.screenshots.length > 0 && (
                <button type="button" onClick={() => handleRemoveScreenshot(index)} className="px-3 py-1 text-sm text-red-500 bg-gray-200 rounded-md hover:bg-gray-300">&times;</button>
              )}
            </div>
          </div>
        ))}
      </div>

      <button
        type="submit"
        className="w-full px-4 py-2 bg-blue-600 text-white font-semibold rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        {initialData ? 'Save Changes' : 'Add Vulnerability'}
      </button>
      {remediationExplanation && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4">
          <div className="bg-white p-6 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <h3 className="text-xl font-bold mb-4">Remediation Explanation</h3>
            <p className="whitespace-pre-wrap">{remediationExplanation}</p>
            <button
              onClick={() => setRemediationExplanation('')}
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Close
            </button>
          </div>
        </div>
      )}
      {previewScreenshot && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4">
          <div className="bg-white p-6 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <img src={previewScreenshot} alt="Screenshot Preview" className="w-full h-auto" />
            <button
              onClick={() => setPreviewScreenshot('')}
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Close
            </button>
          </div>
        </div>
      )}
    </form>
  );
};

const ReportPreview = ({ onBack }) => {
  const { vulnerabilities, reportType, webReportDetails, networkReportDetails } = useContext(AppContext);
  const reportRef = useRef();
  const [isDownloading, setIsDownloading] = useState(false);
  const [isScriptLoaded, setIsScriptLoaded] = useState(false);
  const currentDetails = reportType === 'web' ? webReportDetails : networkReportDetails;

  useEffect(() => {
    const script1 = document.createElement('script');
    script1.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js';
    script1.onload = () => {
      const script2 = document.createElement('script');
      script2.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
      script2.onload = () => {
        setIsScriptLoaded(true);
      };
      document.body.appendChild(script2);
    };
    document.body.appendChild(script1);
    return () => {
      const script2 = document.querySelector('script[src*="jspdf"]');
      if (script1 && document.body.contains(script1)) {
        document.body.removeChild(script1);
      }
      if (script2 && document.body.contains(script2)) {
        document.body.removeChild(script2);
      }
    };
  }, []);

  const handlePdfDownload = async () => {
    if (!isScriptLoaded) {
      console.log('Libraries are still loading...');
      return;
    }
    setIsDownloading(true);
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF('p', 'mm', 'a4');
    const margins = { top: 20, right: 20, bottom: 20, left: 20 };
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    let y = margins.top;
    
    const detailsElement = document.getElementById('report-details-section');
    const detailsImg = await window.html2canvas(detailsElement, { scale: 2 });
    const detailsImgData = detailsImg.toDataURL('image/png');
    const imgWidth = pageWidth - margins.left - margins.right;
    const imgHeight = (detailsElement.offsetHeight * imgWidth) / detailsImg.width;
    doc.addImage(detailsImgData, 'PNG', margins.left, y, imgWidth, imgHeight);
    doc.addPage();

    const tocElement = document.getElementById('table-of-contents-section');
    const tocImg = await window.html2canvas(tocElement, { scale: 2 });
    const tocImgData = tocImg.toDataURL('image/png');
    const tocImgHeight = (tocElement.offsetHeight * imgWidth) / tocImg.width;
    doc.addImage(tocImgData, 'PNG', margins.left, margins.top, imgWidth, tocImgHeight);
    doc.addPage();
    y = margins.top;
    
    const vulnerabilityDetailsElement = document.getElementById('vulnerability-details-section');
    const vulnDetailsChildren = vulnerabilityDetailsElement.children;

    for (const vulnDiv of vulnDetailsChildren) {
      const vulnImg = await window.html2canvas(vulnDiv, { scale: 2 });
      const vulnImgData = vulnImg.toDataURL('image/png');
      const vulnImgHeight = (vulnDiv.offsetHeight * imgWidth) / vulnImg.width;

      if (y + vulnImgHeight > pageHeight - margins.bottom) {
        doc.addPage();
        y = margins.top;
      }
      
      doc.addImage(vulnImgData, 'PNG', margins.left, y, imgWidth, vulnImgHeight);
      y += vulnImgHeight + 10;
    }

    doc.save('vulnerability_report.pdf');
    setIsDownloading(false);
  };
  
  const TableOfContents = () => {
    return (
      <div id="table-of-contents-section" className="mb-8">
        <h2 className="text-2xl font-bold text-gray-800 mb-4">Table of Contents</h2>
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Vulnerability
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                CVSS Score
              </th>
              <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Page
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {vulnerabilities.map((vuln, index) => (
              <tr key={vuln.id}>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {vuln.name}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {vuln.cvssScore}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">
                  {index + 2}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <button
          onClick={onBack}
          className="flex items-center px-4 py-2 bg-gray-200 text-gray-800 rounded-lg shadow-md hover:bg-gray-300 transition-colors duration-200"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to Editor
        </button>
        <button
          onClick={handlePdfDownload}
          className="px-6 py-3 bg-green-600 text-white rounded-lg shadow-lg hover:bg-green-700 transition-colors duration-200 font-semibold text-lg"
          disabled={isDownloading}
        >
          {isDownloading ? 'Generating PDF...' : 'Download Report as PDF'}
        </button>
      </div>
      <div ref={reportRef} className="bg-white p-8 rounded-lg shadow-xl print:shadow-none">
        {/* Report Header */}
        <div className="bg-gray-200 text-gray-800 p-4 rounded-t-lg text-center font-bold text-xl mb-4">
          Report Header
        </div>
        
        <div id="report-details-section" className="border-b-2 pb-4 mb-4">
          <h1 className="text-3xl font-bold text-gray-900">{reportType === 'web' ? 'Web Pentesting Report' : 'Network Pentesting Report'}</h1>
          <p className="text-gray-500">
            <strong>Client Name:</strong> {currentDetails.clientName}
          </p>
          <p className="text-gray-500">
            <strong>Report Issued Date:</strong> {currentDetails.reportIssuedDate}
          </p>
          <p className="text-gray-500">
            <strong>Testing Start Date:</strong> {currentDetails.testingStartDate}
          </p>
          {reportType === 'web' && (
            <>
              <p className="text-gray-500 mt-2">
                <strong>Web Server:</strong> {currentDetails.webServer}
              </p>
              <p className="text-gray-500">
                <strong>Database Server:</strong> {currentDetails.databaseServer}
              </p>
              <p className="text-gray-500">
                <strong>App Framework:</strong> {currentDetails.appFramework}
              </p>
              <p className="text-gray-500">
                <strong>Programming Languages:</strong> {currentDetails.progLanguages}
              </p>
              <p className="text-gray-500">
                <strong>Authentication Mechanisms:</strong> {currentDetails.authMechanisms}
              </p>
            </>
          )}
          <p className="text-gray-500">
            <strong>Test Activities:</strong> {currentDetails.testActivities}
          </p>
        </div>
        <TableOfContents />
        <div id="vulnerability-details-section">
          {vulnerabilities.map((vuln, index) => (
            <div key={vuln.id} className="border-b pb-4 last:border-b-0 mb-8">
              <h3 className="text-xl font-semibold text-red-700">
                {index + 1}. {vuln.name}
              </h3>
              <p className="text-gray-700 mt-2"><strong>Description:</strong> {vuln.description}</p>
              <div className="mt-2 text-sm text-gray-500 space-y-1">
                <p><strong>Risk:</strong></p>
                <ul className="list-disc ml-4 space-y-1">
                  {vuln.risk.map((point, i) => (
                    <li key={i}>{point}</li>
                  ))}
                </ul>
                <p className="mt-2"><strong>CVSS Score:</strong> {vuln.cvssScore}</p>
                {reportType === 'web' && (
                  <p><strong>Vulnerability Location (URL):</strong> {vuln.url}</p>
                )}
                {reportType === 'network' && (
                  <>
                    <p><strong>Device:</strong> {vuln.device}</p>
                    <p><strong>IP Address:</strong> {vuln.ip}</p>
                    <p><strong>Port:</strong> {vuln.port}</p>
                  </>
                )}
                <p className="mt-2"><strong>Payload:</strong></p>
                <pre className="bg-gray-100 p-2 rounded-md whitespace-pre-wrap">{vuln.payload}</pre>
                <p className="mt-2"><strong>Steps to Reproduce:</strong></p>
                <ol className="list-decimal ml-4 space-y-1">
                  {vuln.steps.map((step, i) => (
                    <li key={i}>{step}</li>
                  ))}
                </ol>
              </div>
              <div className="mt-2 text-sm text-gray-500 space-y-1">
                <p><strong>Remediation:</strong></p>
                <ul className="list-disc ml-4 space-y-1">
                  {vuln.remediation.map((point, i) => (
                    <li key={i}>{point}</li>
                  ))}
                </ul>
              </div>
              {vuln.screenshots && vuln.screenshots.length > 0 && (
                <div className="mt-4">
                  <p className="text-sm font-semibold text-gray-700">Screenshots:</p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                    {vuln.screenshots.map((ss, i) => (
                      <div key={i}>
                        <img src={ss.url} alt={ss.caption} className="w-full h-auto rounded-md shadow-sm" />
                        <p className="text-xs text-gray-500 text-center mt-1">{ss.caption}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              <p className="text-xs text-gray-400 mt-2">Added by: <span className="font-mono">{vuln.userId}</span> at {vuln.createdAt}</p>
            </div>
          ))}
        </div>

        {/* Report Footer */}
        <div className="bg-gray-800 text-white p-4 rounded-b-lg text-center font-bold text-sm mt-4">
          Report Footer
        </div>
      </div>
    </div>
  );
};


export default AddVulnerabilityForm;
