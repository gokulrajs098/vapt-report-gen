import { useState } from 'react';

// A reusable component for dynamic, multi-line fields
const DynamicField = ({ title, field, points, handleChange, handleAdd, handleRemove }) => (
  <div className="flex flex-col">
    <h3 className="text-gray-700 dark:text-gray-300 font-semibold mb-2">{title}</h3>
    {points.map((point, index) => (
      <div key={index} className="flex items-center space-x-2 mb-2">
        <span className="text-gray-500 dark:text-gray-400">{index + 1}.</span>
        <textarea
          value={point}
          onChange={(e) => handleChange(e, index, field)}
          placeholder={`Enter ${title} point ${index + 1}`}
          className="flex-1 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white resize-none"
          rows={1}
        />
        <button
          type="button"
          onClick={() => handleRemove(index, field)}
          className="p-1 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
          title="Remove point"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    ))}
    <button
      type="button"
      onClick={() => handleAdd(field)}
      className="self-start mt-2 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors flex items-center space-x-2"
    >
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
      </svg>
      <span>Add Point</span>
    </button>
  </div>
);

// A new component for dynamic IP and Port pairs
const DynamicIpPortField = ({ ipPorts, handleAdd, handleRemove, handleChange }) => (
  <div className="flex flex-col">
    <h3 className="text-gray-700 dark:text-gray-300 font-semibold mb-2">IP/PORT</h3>
    {ipPorts.map((pair, index) => (
      <div key={index} className="flex items-center space-x-2 mb-2">
        <span className="text-gray-500 dark:text-gray-400">{index + 1}.</span>
        <input
          type="text"
          value={pair.ip}
          onChange={(e) => handleChange(e, index, 'ip')}
          placeholder="IP Address"
          className="flex-1 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
        <input
          type="text"
          value={pair.port}
          onChange={(e) => handleChange(e, index, 'port')}
          placeholder="Port"
          className="w-24 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
        <button
          type="button"
          onClick={() => handleRemove(index)}
          className="p-1 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
          title="Remove IP/Port pair"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    ))}
    <button
      type="button"
      onClick={() => handleAdd()}
      className="self-start mt-2 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors flex items-center space-x-2"
    >
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
      </svg>
      <span>Add IP/Port</span>
    </button>
  </div>
);


export default function VulnerabilityForm() {
  const [formData, setFormData] = useState({
    vulnerabilityName: '',
    cvssScore: '',
    status: '',
    severity: '',
    description: '',
    ipPort: [{ ip: '', port: '' }], // Now an array of objects
    riskAssessment: [''],
    payload: '',
    stepsToReproduce: [''],
    screenshots: [],
    recommendation: [''],
    reference: [''],
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleDynamicChange = (e, index, field) => {
    const newItems = [...formData[field]];
    newItems[index] = e.target.value;
    setFormData({ ...formData, [field]: newItems });
    
    e.target.style.height = 'inherit';
    e.target.style.height = `${e.target.scrollHeight}px`;
  };

  const handleAddDynamicField = (field) => {
    setFormData({ ...formData, [field]: [...formData[field], ''] });
  };

  const handleRemoveDynamicField = (index, field) => {
    const newItems = formData[field].filter((_, i) => i !== index);
    setFormData({ ...formData, [field]: newItems });
  };

  // Handlers for the new IP/Port field
  const handleIpPortChange = (e, index, subField) => {
    const newIpPorts = [...formData.ipPort];
    newIpPorts[index][subField] = e.target.value;
    setFormData({ ...formData, ipPort: newIpPorts });
  };

  const handleAddIpPort = () => {
    setFormData({ ...formData, ipPort: [...formData.ipPort, { ip: '', port: '' }] });
  };

  const handleRemoveIpPort = (index) => {
    const newIpPorts = formData.ipPort.filter((_, i) => i !== index);
    setFormData({ ...formData, ipPort: newIpPorts });
  };

  const handleScreenshotChange = (e) => {
    setFormData({ ...formData, screenshots: [...formData.screenshots, ...e.target.files] });
  };

  const handleRemoveScreenshot = (index) => {
    const newScreenshots = formData.screenshots.filter((_, i) => i !== index);
    setFormData({ ...formData, screenshots: newScreenshots });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form Data Submitted:', formData);
    // Submit data to API
  };

  return (
    <form onSubmit={handleSubmit} className="p-8 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl mx-auto my-8 space-y-6">
      <h2 className="text-3xl font-bold text-gray-800 dark:text-white text-center mb-6">Vulnerability Report</h2>

      {/* Vulnerability Name */}
      <div className="flex flex-col">
        <label className="text-gray-700 dark:text-gray-300 font-semibold mb-2">Vulnerability Name</label>
        <input
          type="text"
          name="vulnerabilityName"
          value={formData.vulnerabilityName}
          onChange={handleChange}
          required
          className="p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>

      {/* CVSS Score, Status, Severity in a grid */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* CVSS Score */}
        <div className="flex flex-col">
          <label className="text-gray-700 dark:text-gray-300 font-semibold mb-2">CVSS Score</label>
          <input
            type="number"
            name="cvssScore"
            value={formData.cvssScore}
            onChange={handleChange}
            min="0"
            max="10"
            step="0.1"
            className="p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        {/* Status */}
        <div className="flex flex-col">
          <label className="text-gray-700 dark:text-gray-300 font-semibold mb-2">Status</label>
          <select
            name="status"
            value={formData.status}
            onChange={handleChange}
            className="p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="">Select Status</option>
            <option value="open">Open</option>
            <option value="in_progress">In Progress</option>
            <option value="closed">Closed</option>
          </select>
        </div>

        {/* Severity */}
        <div className="flex flex-col">
          <label className="text-gray-700 dark:text-gray-300 font-semibold mb-2">Severity</label>
          <select
            name="severity"
            value={formData.severity}
            onChange={handleChange}
            className="p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="">Select Severity</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
            <option value="informational">Informational</option>
          </select>
        </div>
      </div>

      {/* Vulnerability Description */}
      <div className="flex flex-col">
        <label className="text-gray-700 dark:text-gray-300 font-semibold mb-2">Vulnerability Description</label>
        <textarea
          name="description"
          value={formData.description}
          onChange={handleChange}
          rows={4}
          className="p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white resize-none"
        />
      </div>
      
      {/* Dynamic IP/Port field */}
      <DynamicIpPortField
        ipPorts={formData.ipPort}
        handleAdd={handleAddIpPort}
        handleRemove={handleRemoveIpPort}
        handleChange={handleIpPortChange}
      />

      {/* Dynamic fields: Risk Assessment */}
      <DynamicField
        title="Risk Assessment"
        field="riskAssessment"
        points={formData.riskAssessment}
        handleChange={handleDynamicChange}
        handleAdd={handleAddDynamicField}
        handleRemove={handleRemoveDynamicField}
      />

      <div className="flex flex-col">
        <label className="text-gray-700 dark:text-gray-300 font-semibold mb-2">Payload</label>
        <textarea
          name="payload"
          value={formData.payload}
          onChange={handleChange}
          rows={4}
          className="p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white resize-none"
        />
      </div>

      {/* Dynamic fields: Steps to Reproduce */}
      <DynamicField
        title="Steps to Reproduce"
        field="stepsToReproduce"
        points={formData.stepsToReproduce}
        handleChange={handleDynamicChange}
        handleAdd={handleAddDynamicField}
        handleRemove={handleRemoveDynamicField}
      />

      {/* Screenshots */}
      <div className="flex flex-col">
        <h3 className="text-gray-700 dark:text-gray-300 font-semibold mb-2">Screenshots</h3>
        <input
          type="file"
          accept="image/*"
          multiple
          onChange={handleScreenshotChange}
          className="block w-full text-sm text-gray-500
          file:mr-4 file:py-2 file:px-4
          file:rounded-full file:border-0
          file:text-sm file:font-semibold
          file:bg-blue-50 file:text-blue-700
          hover:file:bg-blue-100 dark:file:bg-blue-900 dark:file:text-white"
        />
        <div className="mt-4 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {formData.screenshots.map((file, index) => (
            <div key={index} className="relative group">
              <img
                src={URL.createObjectURL(file)}
                alt={`Screenshot ${index + 1}`}
                className="w-full h-32 object-cover rounded-md shadow-md"
              />
              <button
                type="button"
                onClick={() => handleRemoveScreenshot(index)}
                className="absolute top-1 right-1 p-1 bg-red-600 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
              >
                &times;
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Dynamic fields: Recommendation/Mitigation */}
      <DynamicField
        title="Recommendation/Mitigation"
        field="recommendation"
        points={formData.recommendation}
        handleChange={handleDynamicChange}
        handleAdd={handleAddDynamicField}
        handleRemove={handleRemoveDynamicField}
      />

      {/* Dynamic fields: Reference */}
      <DynamicField
        title="Reference"
        field="reference"
        points={formData.reference}
        handleChange={handleDynamicChange}
        handleAdd={handleAddDynamicField}
        handleRemove={handleRemoveDynamicField}
      />

      {/* Submit Button */}
      <button
        type="submit"
        className="w-full py-3 mt-4 bg-blue-600 text-white font-bold rounded-md hover:bg-blue-700 transition-colors"
      >
        Submit Report
      </button>
    </form>
  );
}